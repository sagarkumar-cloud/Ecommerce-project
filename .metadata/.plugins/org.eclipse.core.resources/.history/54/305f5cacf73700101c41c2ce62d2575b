package com.sagar.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.sagar.dto.CategoryDto;
import com.sagar.dto.ProductDto;
import com.sagar.service.CategoryService;
import com.sagar.service.ProductService;

@RequestMapping("/ECOM/api")
@RestController
public class ProductRestController {

	private CategoryService categoryService;
	private ProductService productService;

	public ProductRestController(CategoryService categoryService,ProductService productService) {
		this.categoryService = categoryService;
		this.productService=productService;
	}

	@PostMapping("/category")
	public ResponseEntity<CategoryDto> createCategory(@RequestBody CategoryDto categoryDto) {
		return new ResponseEntity<>(categoryService.createCategory(categoryDto), HttpStatus.CREATED);
	}

	@GetMapping("/category")
	public ResponseEntity<List<CategoryDto>> getAllCategory() {
		return new ResponseEntity<>(categoryService.getAllCategory(), HttpStatus.OK);
	}

	@PutMapping("/category/{categoryId}")
	public ResponseEntity<CategoryDto> updateCatogery(@PathVariable("categoryId") Long categoryId,
			@RequestBody CategoryDto categoryDto) {
		return new ResponseEntity<>(categoryService.updateCategory(categoryId, categoryDto), HttpStatus.OK);
	}

	@DeleteMapping("/category/{categoryId}")
	public ResponseEntity<String> deleteCategory(@PathVariable("categoryId") Long categoryId) {
		boolean deleteCategory = categoryService.deleteCategory(categoryId);
		if (deleteCategory)
			return new ResponseEntity<>("Category deleted..!", HttpStatus.OK);
		return new ResponseEntity<>("Category not deleted..!", HttpStatus.BAD_REQUEST);
	}

	// ------------------------------product--------------------------------------//
    
	//http://localhost:8080/ECOM/api/category/product/1
	@GetMapping("/category/product/{categoryId}")
	public ResponseEntity<List<ProductDto>> getAllProductsByCategoryId(@PathVariable("categoryId") Long categoryId) {
		List<ProductDto> products = productService.getAllProductByCategoryId(categoryId);
		return new ResponseEntity<>(products, HttpStatus.OK);
	}

     //http://localhost:8080/ECOM/api/product/1	
	@PostMapping("/product/{categoryId}")
	public ResponseEntity<ProductDto> createProduct(@PathVariable("categoryId") Long categoryId,
			@RequestBody ProductDto productDto) {
		ProductDto product = productService.createProduct(categoryId, productDto);
		return new ResponseEntity<>(product, HttpStatus.CREATED);
	}

	//http://localhost:8080/ECOM/api/product/1
	@GetMapping("/product/{productId}")
	public ResponseEntity<ProductDto> getProductByProductId(@PathVariable("productId") Long productId) {
		ProductDto productById = productService.getProductById(productId);
		return new ResponseEntity<>(productById, HttpStatus.OK);
	}

	//http://localhost:8080/ECOM/api/product?productName=redmi 16T 5G
	@GetMapping("/product")
	public ResponseEntity<ProductDto> getProductBasedOnName(@RequestParam("productName") String productName) {
		return new ResponseEntity<>(productService.getProductBasedOnName(productName), HttpStatus.OK);
	}

	
	@PutMapping("/product/{categoryId}/{productId}")
	public ResponseEntity<ProductDto> updateProduct(@PathVariable("categoryId") Long categoryId,
			@PathVariable("productId") Long productId, @RequestBody ProductDto productDto) {
		ProductDto updateProducts = productService.updateProducts(categoryId, productId, productDto);
		return new ResponseEntity<>(updateProducts, HttpStatus.OK);
	}
}
